#!/bin/sh

# cd base dir of project.
CUR_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)
cd $CUR_PATH
BATH_PATH=$(pwd)

# include sdk of sparrow.
source .work/include/sdk.sh

# before run sparrow command.
before_sparrow_command() {
    print_info "do before_sparrow_command..."

    print_stage "check startable..."
    if ! check_startable; then
        print_error "check startable failed"
        exit 1
    fi
}

# after run sparrow command.
after_sparrow_command() {
    print_info "do after_sparrow_command..."
}

# start one service.
startone() {
    print_info "sparrow start one..."

    print_stage "do service stop..."
    stopone $1

    print_stage "do before_start hook..."
    hook $CONST_HOOK_BEFORE_START $1

    print_stage "do pull/build sparrow-app-$1 images..."
    pull_or_build_app_image $1

    print_stage "do compose..."
    if ! docker-compose --env-file $CONST_SPARROW_CONFIG_ENV_FILE up -d --no-deps "$1"; then
        print_error "$1 compose failed"
        exit 1
    fi

    print_stage "do after_start hook..."
    hook $CONST_HOOK_AFTER_START $1

    print_info "sparrow startone successfully"
}

# stop one service.
stopone() {
    print_info "sparrow stop one..."

    print_stage "do before_stop hook..."
    hook $CONST_HOOK_BEFORE_STOP $1

    container_name="sparrow_container_${CONTAINER_NAMESPACE}_${1}"
    print_stage "do docker stop: ${container_name}..."
    docker stop "$container_name"

    print_stage "do after_stop hook..."
    hook $CONST_HOOK_AFTER_STOP $1
}

# update one service.
updateone() {
    print_info "sparrow update one..."

    print_stage "do service stopone..."
    stopone $1

    print_stage "do clear service..."
    clear_service $1

    print_stage "do before_start hook..."
    hook $CONST_HOOK_BEFORE_START $1

    # build app image
    print_stage "do build sparrow-app-${1} image..."
    if ! source "./${1}/make_app_image/run.sh"; then
        print_error "failed to build sparrow-app-${1} image"
        exit 1
    fi

    print_stage "do compose..."
    if ! docker-compose --env-file $CONST_SPARROW_CONFIG_ENV_FILE up -d --no-deps "$1"; then
        print_error "$1 compose failed"
        exit 1
    fi

    print_stage "do after_start hook..."
    hook $CONST_HOOK_AFTER_START $1

    print_info "sparrow update one successfully"
}

# start all services.
start() {
    print_info "sparrow start all..."
    
    for service in "${ENABLE_SERVICE_LIST[@]}"; do
        print_info "current service: $service"

        print_stage "do service stop..."
        stopone $service

        print_stage "do service start..."
        startone $service
    done

    print_info "sparrow start successfully"
}

# stop all services.
stop() {
    print_info "sparrow stop all..."

    for service in "${ENABLE_SERVICE_LIST[@]}"; do
        print_info "current service: $service"

        print_stage "do service stop..."
        stopone $service
    done

    print_info "sparrow stop successfully"
}

# restart sparrow
restart() {
    start
}

##################### start script exec flow #####################

# before run sparrow command.
before_sparrow_command

# when run sparrow command.
COMMAND=$1
# core commands.
if [ "${COMMAND}" = "start" ]; then
    start
elif [ "${COMMAND}" = "restart" ]; then
    restart
elif [ "${COMMAND}" = "stop" ]; then
    stop
elif [ "${COMMAND}" = "startone" ]; then
    if [ "$2" == "" ]; then
        print_error "check param error: miss service param"
        exit 1
    fi
    startone "$2"
elif [ "${COMMAND}" = "stopone" ]; then
    if [ "$2" == "" ]; then
        print_error "check param error: miss service param"
        exit 1
    fi
    stopone "$2"
elif [ "${COMMAND}" = "updateone" ]; then
    if [ "$2" == "" ]; then
        print_error "check param error: miss service param"
        exit 1
    fi
    updateone "$2"
# not core commands.
elif [ "${COMMAND}" = "clear" ]; then
    clear_service "all"
elif [ "${COMMAND}" = "clearone" ]; then
    if [ "$2" == "" ]; then
        print_error "check param error: miss service param"
        exit 1
    fi
    clear_service "$2"
elif [ "${COMMAND}" = "help" ] || [ "${COMMAND}" = "--help" ] || [ "${COMMAND}" = "h" ] || [ "${COMMAND}" = "-h" ] ; then
    sparrow_help
else
    echo "not support command: ${COMMAND}"
fi

# after run sparrow command.
after_sparrow_command

##################### end script exec flow #######################
